from aiogram import *
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram import *
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram import *
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import json
import aiohttp
from bs4 import BeautifulSoup

async def zapusk():
    from SETTINGS import TOKEN
    bot = Bot(token=TOKEN)
    dp = Dispatcher()

    def main():
        builder = ReplyKeyboardBuilder()
        builder.row(types.KeyboardButton(text="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–º–ø–µ—Ä–∞"), types.KeyboardButton(text="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–º–ø–µ—Ä–∞ –º–µ–ª–∫–∏—Ö –∑–≤—ë–∑–¥"))
        builder.row(types.KeyboardButton(text="üíß –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—å—è–≤–ª–µ–Ω–∏–π"))

        return builder.as_markup(resize_keyboard=True)

    def start_btn():
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üìà 50 stars", callback_data="edit-50 –∑–≤—ë–∑–¥"))
        builder.row(types.InlineKeyboardButton(text="üìà 75 stars", callback_data="edit-75 –∑–≤—ë–∑–¥"))
        builder.row(types.InlineKeyboardButton(text="üìà 100 stars", callback_data="edit-100 –∑–≤—ë–∑–¥"))
        builder.row(types.InlineKeyboardButton(text="üìà 150 stars", callback_data="edit-150 –∑–≤—ë–∑–¥"))
        builder.row(types.InlineKeyboardButton(text="üìà 200 stars", callback_data="edit-200 –∑–≤—ë–∑–¥"))
        builder.row(types.InlineKeyboardButton(text="üìà 250 stars", callback_data="edit-250 –∑–≤—ë–∑–¥"))
        builder.row(types.InlineKeyboardButton(text="üìà 350 stars", callback_data="edit-350 –∑–≤—ë–∑–¥"))
        builder.row(types.InlineKeyboardButton(text="üìà 500 stars", callback_data="edit-500 –∑–≤—ë–∑–¥"))
        builder.row(types.InlineKeyboardButton(text="üìà 1000 stars", callback_data="edit-1000 –∑–≤—ë–∑–¥"))
        builder.row(types.InlineKeyboardButton(text="üìà 2500 stars", callback_data="edit-2500 –∑–≤—ë–∑–¥"))
        
        return builder.as_markup(resize_keyboard=True)
    

    def start_btn1():
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üìâ 10 stars", callback_data="edit-10 –∑–≤—ë–∑–¥"))
        builder.row(types.InlineKeyboardButton(text="üìâ 15 stars", callback_data="edit-15 –∑–≤—ë–∑–¥"))
        builder.row(types.InlineKeyboardButton(text="üìâ 25 stars", callback_data="edit-25 –∑–≤—ë–∑–¥"))
        
        return builder.as_markup(resize_keyboard=True)

    def edit_btn(stars):
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üíé –°–º–µ–Ω–∏—Ç—å –∞–π–¥–∏ –æ–±—å—è–≤—ã", callback_data=f"smena-{stars}"))
        builder.row(types.InlineKeyboardButton(text="üíé –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞", callback_data=f"delete-{stars}"))
        builder.row(types.InlineKeyboardButton(text="üíé –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫", callback_data=f"add-{stars}"))

        return builder.as_markup(resize_keyboard=True)

    def load_data(filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return []
        except json.JSONDecodeError:
            print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
            return []

    def save_data(filename, data):
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

    def update_value(spisok, comment, new_value):
        for item in spisok:
            if item['comment'] == comment:
                item['value'] = new_value
                return f"Value updated for comment '{comment}' to '{new_value}'."
        return f"Comment '{comment}' not found."

    def add_to_nums(spisok, comment, new_num):
        for item in spisok:
            if item['comment'] == comment:
                if new_num not in item['nums']:
                    item['nums'].append(new_num)
                    return f"Number '{new_num}' added to nums for comment '{comment}'."
                else:
                    return f"Number '{new_num}' already exists in nums for comment '{comment}'."
        return f"Comment '{comment}' not found."

    def remove_from_nums(spisok, comment, num_to_remove):
        for item in spisok:
            if item['comment'] == comment:
                if num_to_remove in item['nums']:
                    item['nums'].remove(num_to_remove)
                    return f"Number '{num_to_remove}' removed from nums for comment '{comment}'."
                else:
                    return f"Number '{num_to_remove}' not found in nums for comment '{comment}'."
        return f"Comment '{comment}' not found."

    def print_nums(spisok, comment):
        for item in spisok:
            if item['comment'] == comment:
                return item['nums']
        return f"Comment '{comment}' not found."

    class A(StatesGroup):
        edit = State()
        delete = State()
        add = State()

    @dp.message(Command("start"))
    async def start_handler(message: Message, state: FSMContext):
        await bot.send_message(message.from_user.id, f"""<b>üëë –û—Ç–∫—Ä—ã–≤–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...</b>""", reply_markup=main(), parse_mode=ParseMode.HTML)

    @dp.message(F.text == "ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–º–ø–µ—Ä–∞")
    async def start_handler(message: Message, state: FSMContext):
        await bot.send_message(message.from_user.id, f"""<b>üßä –í—ã–±–∏—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å</b>""", reply_markup=start_btn(), parse_mode=ParseMode.HTML)

    @dp.message(F.text == "ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–º–ø–µ—Ä–∞ –º–µ–ª–∫–∏—Ö –∑–≤—ë–∑–¥")
    async def start_handler(message: Message, state: FSMContext):
        await bot.send_message(message.from_user.id, f"""<b>üßä –í—ã–±–∏—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å</b>""", reply_markup=start_btn1(), parse_mode=ParseMode.HTML)

    @dp.message(F.text == "üíß –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—å—è–≤–ª–µ–Ω–∏–π")
    async def start_handler(message: Message, state: FSMContext):
        headers = {
            "accept": "*/*",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "x-requested-with": "XMLHttpRequest"
        }
        from main import Data
        from SETTINGS import PROXY

        data_instance = Data()
        with open("data.json", 'r') as f:
            data_dict = json.load(f)
            data_instance = Data()
            data_instance.__dict__.update(data_dict)

        ord = []
        ord_today = []
        ord_yesterday = []

        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://funpay.com/orders/trade?state=paid", headers={**data_instance.headers, **headers}, proxy=PROXY) as resp:
                reader = resp.content
                data = await reader.read()
                html_response = data.decode('utf-8')

            parser = BeautifulSoup(html_response, "lxml")

            next_order_id = parser.find("input", {"type": "hidden", "name": "continue"})
            next_order_id = next_order_id.get("value") if next_order_id else None

            order_divs = parser.find_all("a", {"class": "tc-item"})

            sales = []
            for div in order_divs:
                classname = div.get("class")
                if "info" in classname:
                    order_date_text = div.find("div", {"class": "tc-date-time"}).text
                    order_id = div.find("div", {"class": "tc-order"}).text[1:]
                    if order_date_text.count(" ") == 2:
                        ord.append(order_id)
                    elif any(today in order_date_text for today in ("—Å–µ–≥–æ–¥–Ω—è", "—Å—å–æ–≥–æ–¥–Ω—ñ", "today")):
                        ord_today.append(order_id)
                    elif any(yesterday in order_date_text for yesterday in ("–≤—á–µ—Ä–∞", "–≤—á–æ—Ä–∞", "yesterday")):
                        ord_yesterday.append(order_id)

        await bot.send_message(message.from_user.id, f"""<b>üîó –ù–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –æ–±—å—è–≤–ª–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {ord_today}</b>""", parse_mode=ParseMode.HTML)
        await bot.send_message(message.from_user.id, f"""<b>üîó –ù–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –æ–±—å—è–≤–ª–µ–Ω–∏—è –≤—á–µ—Ä–∞: {ord_yesterday}</b>""", parse_mode=ParseMode.HTML)
        await bot.send_message(message.from_user.id, f"""<b>üîó –ù–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –æ–±—å—è–≤–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É: {ord}</b>""", parse_mode=ParseMode.HTML)

    @dp.callback_query(F.data.startswith("edit-"))
    async def start_handler(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.message.delete()
        ref = callback_query.data.split("-")[1]
        await bot.send_message(callback_query.from_user.id, f"""<b>üí≥ –í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>""", reply_markup=edit_btn(ref), parse_mode=ParseMode.HTML)

    @dp.callback_query(F.data.startswith("edit-"))
    async def start_handler(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.message.delete()
        ref = callback_query.data.split("-")[1]
        await bot.send_message(callback_query.from_user.id, f"""<b>üí≥ –í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>""", reply_markup=edit_btn(ref), parse_mode=ParseMode.HTML)

    @dp.callback_query(F.data.startswith("smena-"))
    async def start_handler(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.message.delete()
        ref = callback_query.data.split("-")[1]
        await state.update_data(ref=ref)
        await state.set_state(A.edit)
        await bot.send_message(callback_query.from_user.id, f"""<b>üí≥ –í–≤–µ–¥–∏—Ç–µ id –Ω–æ–≤–æ–≥–æ –æ–±—å—è–≤–ª–µ–Ω–∏—è</b>""", parse_mode=ParseMode.HTML)

    @dp.message(A.edit)
    async def start_handler(message: Message, state: FSMContext):
        data = await state.get_data()
        await state.clear()
        spisok = load_data("dump.json")

        update = update_value(spisok, data["ref"], message.text)
        save_data("dump.json", spisok)

        if "Value updated for comment" in str(update):
            await bot.send_message(message.from_user.id, f"""<b>üçÄ –û–±—å—è–ª–≤–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω–æ</b>""", parse_mode=ParseMode.HTML)
        else:
            await bot.send_message(message.from_user.id, str(update), parse_mode=ParseMode.HTML)

    @dp.callback_query(F.data.startswith("delete-"))
    async def start_handler(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.message.delete()
        ref = callback_query.data.split("-")[1]
        await state.update_data(ref=ref)
        await state.set_state(A.delete)
        spisok = load_data("dump.json")
        obj = print_nums(spisok, ref)
        await bot.send_message(callback_query.from_user.id, f"""<b>üí≥ –í–≤–µ–¥–∏—Ç–µ id –æ–±—å—è–≤–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —Ç–µ–∫—É—â–∏–µ –æ–±—å—è–≤–ª–µ–Ω–∏—è: {str(obj)}</b>""", parse_mode=ParseMode.HTML)

    @dp.message(A.delete)
    async def start_handler(message: Message, state: FSMContext):
        data = await state.get_data()
        await state.clear()
        spisok = load_data("dump.json")

        update = remove_from_nums(spisok, data["ref"], message.text)
        save_data("dump.json", spisok)

        if "removed from nums for comment " in str(update):
            await bot.send_message(message.from_user.id, f"""<b>üçÄ –û–±—å—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ</b>""", parse_mode=ParseMode.HTML)
        else:
            await bot.send_message(message.from_user.id, str(update), parse_mode=ParseMode.HTML)

    @dp.callback_query(F.data.startswith("add-"))
    async def start_handler(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.message.delete()
        ref = callback_query.data.split("-")[1]
        await state.update_data(ref=ref)
        await state.set_state(A.add)
        spisok = load_data("dump.json")
        obj = print_nums(spisok, ref)
        await bot.send_message(callback_query.from_user.id, f"""<b>üí≥ –í–≤–µ–¥–∏—Ç–µ id –æ–±—å—è–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ç–µ–∫—É—â–∏–µ –æ–±—å—è–≤–ª–µ–Ω–∏—è: {str(obj)}</b>""", parse_mode=ParseMode.HTML)

    @dp.message(A.add)
    async def start_handler(message: Message, state: FSMContext):
        data = await state.get_data()
        await state.clear()
        spisok = load_data("dump.json")

        update = add_to_nums(spisok, data["ref"], message.text)
        save_data("dump.json", spisok)

        if "added to nums for comment " in str(update):
            await bot.send_message(message.from_user.id, f"""<b>üçÄ –û–±—å—è–ª–≤–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>""", parse_mode=ParseMode.HTML)
        else:
            await bot.send_message(message.from_user.id, str(update), parse_mode=ParseMode.HTML)
    
    await dp.start_polling(bot)